// Prisma Schema for Agents Playbook User Platform
// Database: Neon PostgreSQL with Row-Level Security

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") // Optional: Only needed for migrations with connection pooling
}

// ============================================================================
// Enums
// ============================================================================

enum UserTier {
  FREE
  PREMIUM
}

enum UserRole {
  USER
  ADMIN
}

enum Visibility {
  PUBLIC
  PRIVATE
}

enum TargetType {
  WORKFLOW
  MINI_PROMPT
}

// ============================================================================
// Models
// ============================================================================

model User {
  id           String      @id @default(uuid())
  email        String      @unique
  username     String      @unique
  passwordHash String      @map("password_hash")
  tier         UserTier    @default(FREE)
  role         UserRole    @default(USER)
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")
  
  // Relations
  apiTokens             ApiToken[]
  workflows             Workflow[]
  miniPrompts           MiniPrompt[]
  ratings               Rating[]
  workflowReferences    WorkflowReference[]
  miniPromptReferences  MiniPromptReference[]

  @@map("users")
  @@index([email])
  @@index([tier])
}

model ApiToken {
  id         String    @id @default(uuid())
  userId     String    @map("user_id")
  tokenHash  String    @map("token_hash")
  name       String
  expiresAt  DateTime  @map("expires_at")
  lastUsedAt DateTime? @map("last_used_at")
  createdAt  DateTime  @default(now()) @map("created_at")
  
  // Relations
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("api_tokens")
  @@index([userId])
  @@index([tokenHash])
  @@index([expiresAt])
}


model Workflow {
  id                String      @id @default(uuid())
  userId            String      @map("user_id")
  name              String      @db.VarChar(255)
  description       String?     @db.Text
  yamlContent       String?     @map("yaml_content") @db.Text // Made nullable for new workflows
  visibility        Visibility  @default(PRIVATE)
  isActive          Boolean     @default(false) @map("is_active")
  isSystemWorkflow  Boolean     @default(false) @map("is_system_workflow")
  createdAt         DateTime    @default(now()) @map("created_at")
  updatedAt         DateTime    @updatedAt @map("updated_at")

  // Relations
  user       User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  stages     WorkflowStage[]
  references WorkflowReference[]
  embedding  WorkflowEmbedding?
  tags       WorkflowTag[]

  @@map("workflows")
  @@index([userId])
  @@index([visibility])
  @@index([isActive])
  @@index([isSystemWorkflow])
  @@index([createdAt])
}

// WorkflowStage represents a stage in a workflow
model WorkflowStage {
  id          String   @id @default(uuid())
  workflowId  String   @map("workflow_id")
  name        String   @db.VarChar(255)
  description String?  @db.Text
  color       String?  @db.VarChar(50) // Stage color for visual identification
  order       Int
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  workflow    Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  miniPrompts StageMiniPrompt[]

  @@map("workflow_stages")
  @@index([workflowId])
}

model MiniPrompt {
  id                 String      @id @default(uuid())
  userId             String      @map("user_id")
  name               String      @db.VarChar(255)
  content            String      @db.Text // Markdown content
  visibility         Visibility  @default(PRIVATE)
  isActive           Boolean     @default(false) @map("is_active")
  isSystemMiniPrompt Boolean     @default(false) @map("is_system_mini_prompt")
  createdAt          DateTime    @default(now()) @map("created_at")
  updatedAt          DateTime    @updatedAt @map("updated_at")

  // Relations
  user              User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  stageMiniPrompts  StageMiniPrompt[]
  references        MiniPromptReference[]
  tags              MiniPromptTag[]

  @@map("mini_prompts")
  @@index([userId])
  @@index([visibility])
  @@index([isActive])
  @@index([isSystemMiniPrompt])
  @@index([createdAt])
}

// StageMiniPrompt junction table
model StageMiniPrompt {
  stageId      String @map("stage_id")
  miniPromptId String @map("mini_prompt_id")
  order        Int

  // Relations
  stage      WorkflowStage @relation(fields: [stageId], references: [id], onDelete: Cascade)
  miniPrompt MiniPrompt    @relation(fields: [miniPromptId], references: [id], onDelete: Restrict)

  @@id([stageId, miniPromptId])
  @@map("stage_mini_prompts")
  @@index([stageId])
  @@index([miniPromptId])
}

model Rating {
  id         String      @id @default(uuid())
  userId     String      @map("user_id")
  targetType TargetType  @map("target_type")
  targetId   String      @map("target_id")
  rating     Int         // Validated in application layer: 1-5
  createdAt  DateTime    @default(now()) @map("created_at")

  // Relations
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  // Note: targetId is polymorphic (Workflow or MiniPrompt) - handled at application layer

  @@unique([userId, targetType, targetId])
  @@map("ratings")
  @@index([userId])
  @@index([targetType, targetId])
  @@index([rating])
  @@index([createdAt])
}

model UsageStats {
  id               String      @id @default(uuid())
  targetType       TargetType  @map("target_type")
  targetId         String      @map("target_id")
  usageCount       Int         @default(0) @map("usage_count")
  uniqueUsersCount Int         @default(0) @map("unique_users_count")
  lastUsedAt       DateTime?   @map("last_used_at")
  updatedAt        DateTime    @updatedAt @map("updated_at")

  // Note: targetId is polymorphic (Workflow or MiniPrompt) - handled at application layer

  @@unique([targetType, targetId])
  @@map("usage_stats")
  @@index([targetType])
  @@index([usageCount])
  @@index([uniqueUsersCount])
}

model WorkflowReference {
  id         String   @id @default(uuid())
  userId     String   @map("user_id")
  workflowId String   @map("workflow_id")
  addedAt    DateTime @default(now()) @map("added_at")

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  workflow Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@unique([userId, workflowId])
  @@map("workflow_references")
  @@index([userId])
  @@index([workflowId])
}

model MiniPromptReference {
  id           String     @id @default(uuid())
  userId       String     @map("user_id")
  miniPromptId String     @map("mini_prompt_id")
  addedAt      DateTime   @default(now()) @map("added_at")

  // Relations
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  miniPrompt  MiniPrompt @relation(fields: [miniPromptId], references: [id], onDelete: Cascade)

  @@unique([userId, miniPromptId])
  @@map("mini_prompt_references")
  @@index([userId])
  @@index([miniPromptId])
}

model WorkflowEmbedding {
  id          String   @id @default(uuid())
  workflowId  String   @unique @map("workflow_id")
  embedding   Json     // Vector embedding as JSON array
  searchText  String   @db.Text // Cached searchable text
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  workflow    Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@map("workflow_embeddings")
  @@index([workflowId])
}

model Tag {
  id        String   @id @default(uuid())
  name      String   @unique @db.VarChar(50)
  color     String?  @db.VarChar(20)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  workflowTags    WorkflowTag[]
  miniPromptTags  MiniPromptTag[]

  @@map("tags")
  @@index([name])
}

model WorkflowTag {
  workflowId String @map("workflow_id")
  tagId      String @map("tag_id")

  // Relations
  workflow Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  tag      Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([workflowId, tagId])
  @@map("workflow_tags")
  @@index([workflowId])
  @@index([tagId])
}

model MiniPromptTag {
  miniPromptId String @map("mini_prompt_id")
  tagId        String @map("tag_id")

  // Relations
  miniPrompt MiniPrompt @relation(fields: [miniPromptId], references: [id], onDelete: Cascade)
  tag        Tag        @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([miniPromptId, tagId])
  @@map("mini_prompt_tags")
  @@index([miniPromptId])
  @@index([tagId])
}

