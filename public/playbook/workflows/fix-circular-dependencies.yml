name: "Fix Circular Dependencies Workflow"
description: "Comprehensive approach to eliminate circular dependencies through proper architectural restructuring"
version: "1.0"
category: "development"
tags: ["circular-dependencies", "architecture", "refactoring", "modules", "imports"]

phases:
  - phase: "analysis"
    description: "Analyze circular dependencies and identify architectural issues"
    required: true
    steps:
      - id: "trace-circular-dependencies"
        miniPrompt: "analysis/trace-bug-root-cause"
        required: true
        prerequisites:
          requiredContext: ["circular_dependency_errors", "dependency_graph"]
          optionalContext: ["error_messages", "module_structure", "build_logs"]

      - id: "architecture-analysis"
        miniPrompt: "analysis/architecture-analysis"
        required: true
        prerequisites:
          requiredContext: ["circular_dependency_chain", "module_structure"]
          optionalContext: ["business_logic_mapping", "existing_patterns"]
        dependencies: ["trace-circular-dependencies"]

  - phase: "planning-clarification"
    description: "Plan refactoring strategy and get approval if needed"
    required: true
    steps:
      - id: "assess-refactoring-scope"
        miniPrompt: "development/ask-clarifying-questions"
        required: true
        prerequisites:
          requiredContext: ["circular_dependency_analysis", "architecture_issues"]
          optionalContext: ["business_constraints", "timeline_requirements"]
        dependencies: ["architecture-analysis"]

      - id: "document-refactoring-proposal"
        miniPrompt: "business/document-decisions"
        required: false
        prerequisites:
          requiredContext: ["refactoring_scope", "user_approval"]
          optionalContext: ["architectural_changes", "impact_assessment"]
          skipConditions: ["simple_circular_fix", "no_major_refactoring"]
        dependencies: ["assess-refactoring-scope"]

  - phase: "implementation"
    description: "Fix circular dependencies and implement refactoring if approved"
    required: true
    steps:
      - id: "fix-circular-dependencies"
        miniPrompt: "development/fix-circular-dependencies"
        required: true
        prerequisites:
          requiredContext: ["dependency_chain", "fix_strategy"]
          optionalContext: ["module_restructure_plan", "approved_refactoring"]
        dependencies: ["assess-refactoring-scope"]

      - id: "implement-refactoring"
        miniPrompt: "development/implement-feature"
        required: false
        prerequisites:
          requiredContext: ["approved_refactoring_plan", "architectural_changes"]
          optionalContext: ["migration_strategy", "backward_compatibility_plan"]
          skipConditions: ["no_refactoring_approved", "minimal_changes_only"]
        dependencies: ["fix-circular-dependencies", "document-refactoring-proposal"]

  - phase: "testing-validation"
    description: "Validate fixes and ensure no regression"
    required: true
    steps:
      - id: "validate-dependency-resolution"
        miniPrompt: "qa/execute-tests"
        required: true
        prerequisites:
          requiredContext: ["implemented_fixes", "dependency_changes"]
          optionalContext: ["build_process", "import_validation"]
        dependencies: ["fix-circular-dependencies"]

      - id: "validate-refactoring"
        miniPrompt: "qa/validate-requirements"
        required: false
        prerequisites:
          requiredContext: ["implemented_refactoring", "original_functionality"]
          optionalContext: ["performance_requirements", "compatibility_tests"]
          skipConditions: ["no_refactoring_implemented"]
        dependencies: ["implement-refactoring"]

workflow_context:
  steps_count: 7
  common_scenarios:
    - "TypeScript/JavaScript circular import errors"
    - "Module dependency cycles in large codebases"
    - "Build failures due to circular references"
    - "Architectural debt requiring module restructuring"
    - "Legacy code with tangled dependencies"

skip_conditions:
  - condition: "simple_type_only_circular"
    description: "Skip complex analysis for simple type-only circular imports"
    affects_steps: ["architecture-analysis"]
  - condition: "no_major_refactoring"
    description: "Skip refactoring steps when only simple fixes are needed"
    affects_steps: ["document-refactoring-proposal", "implement-refactoring", "validate-refactoring"]
  - condition: "single_file_issue"
    description: "Skip architectural analysis for single-file circular issues"
    affects_steps: ["architecture-analysis", "assess-refactoring-scope"]

success_criteria:
  - "All circular dependency errors resolved"
  - "Module structure follows proper dependency hierarchy"
  - "Build process completes without circular warnings"
  - "No regression in existing functionality"
  - "Architectural improvements documented if implemented"

refactoring_integration:
  triggers:
    - "Multiple circular dependencies indicate architectural issues"
    - "Module structure violates separation of concerns"
    - "Business logic tangled across multiple modules"
  approval_required: true
  documentation_required: true 