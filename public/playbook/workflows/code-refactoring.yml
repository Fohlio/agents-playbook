name: "Code Refactoring Workflow"
description: "Systematic code refactoring to improve architecture, performance, and maintainability"
version: "1.0"
category: "development"
tags: ["refactoring", "architecture", "performance", "maintainability", "technical-debt"]

metadata:
  complexity: "medium-high"
  skillLevel: "intermediate"

phases:
  - phase: "analysis"
    description: "Code analysis and refactoring planning"
    required: true
    steps:
      - id: "code-analysis"
        miniPrompt: "analysis/code-analysis"
        required: true
        prerequisites:
          requiredContext: ["existing_codebase"]
          optionalContext: ["performance_metrics", "maintenance_issues"]
        
      - id: "architecture-analysis"
        miniPrompt: "analysis/architecture-analysis"
        required: true
        prerequisites:
          requiredContext: ["code_analysis_results", "system_architecture"]
          optionalContext: ["scalability_requirements", "performance_targets"]
        dependencies: ["code-analysis"]

  - phase: "design-architecture"
    description: "Refactoring strategy and design"
    required: true
    steps:
      - id: "design-architecture"
        miniPrompt: "development/design-architecture"
        required: true
        prerequisites:
          requiredContext: ["architecture_analysis", "refactoring_goals"]
          optionalContext: ["new_requirements", "technical_constraints"]
        dependencies: ["architecture-analysis"]

  - phase: "implementation"
    description: "Code refactoring execution"
    required: true
    steps:
      - id: "implement-feature"
        miniPrompt: "development/implement-feature"
        required: true
        prerequisites:
          requiredContext: ["refactoring_design", "implementation_plan"]
          optionalContext: ["migration_strategy", "backward_compatibility"]
        dependencies: ["design-architecture"]

  - phase: "testing-validation"
    description: "Refactoring validation and testing"
    required: true
    steps:
      - id: "create-test-plan"
        miniPrompt: "qa/create-test-plan"
        required: true
        prerequisites:
          requiredContext: ["refactored_code", "original_functionality"]
          optionalContext: ["performance_requirements", "compatibility_requirements"]
        dependencies: ["implement-feature"]
        
      - id: "execute-tests"
        miniPrompt: "qa/execute-tests"
        required: true
        prerequisites:
          requiredContext: ["test_plan", "refactored_system"]
          optionalContext: ["automated_tests", "performance_benchmarks"]
        dependencies: ["create-test-plan"]

  - phase: "completion-reflection"
    description: "Documentation and knowledge sharing"
    required: true
    steps:
      - id: "document-decisions"
        miniPrompt: "business/document-decisions"
        required: true
        prerequisites:
          requiredContext: ["refactoring_results", "architectural_changes"]
          optionalContext: ["performance_improvements", "lessons_learned"]
        dependencies: ["execute-tests"]

# Workflow-level configurations
skipConditions:
  - condition: "new_greenfield_project"
    message: "No existing code to refactor, use feature-development workflow instead"
  - condition: "minimal_technical_debt"
    message: "Codebase doesn't require significant refactoring"

validationRules:
  - rule: "backward_compatibility_required"
    phases: ["implementation"]
    dependencies: ["design-architecture"]
    message: "Refactoring must maintain backward compatibility unless technical requirements specify otherwise"
  - rule: "performance_validation_required"
    phases: ["testing-validation"]
    dependencies: ["implementation"]
    message: "Performance impact must be measured and validated"

notifications:
  - trigger: "phase_completion"
    phases: ["analysis", "implementation"]
    message: "Major refactoring phase completed"
  - trigger: "workflow_completion"
    message: "Code refactoring completed successfully"

# Smart execution settings
execution:
  allowSkipping: true
  requireExplicitApproval: false
  parallelExecution: false
  automaticProgressTracking: true
  
# Integration settings
integrations:
  development:
    - github
    - gitlab
    - sonarqube
  testing:
    - jest
    - cypress
    - selenium
  monitoring:
    - datadog
    - new-relic
  documentation:
    - confluence
    - notion 