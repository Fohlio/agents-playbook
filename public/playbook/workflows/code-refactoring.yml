name: "Code Refactoring Workflow"
description: "Systematic code refactoring to improve architecture, performance, and maintainability"
version: "1.0"
category: "development"
tags: ["refactoring", "architecture", "performance", "maintainability", "technical-debt"]

# CRITICAL: VALIDATE ALL STEPS BEFORE STARTING
agentInstructions:
  validation:
    required: true
    message: "ðŸš¨ MANDATORY: Before starting, validate ALL workflow steps, prerequisites, mini-prompts access, and required context. Execute ALL steps completely - no skipping unless explicitly optional."

phases:
  - phase: "analysis"
    description: "Requirements gathering and refactoring scope definition - CRITICAL: Ask detailed clarifying questions to fully understand refactoring goals and constraints before proceeding"
    required: true
    steps:
      - id: "analyze-refactoring-scope"
        miniPrompt: "analysis/analyze-refactoring-scope"
        required: true
        prerequisites:
          requiredContext: []
          optionalContext: ["existing_codebase", "performance_issues", "maintenance_concerns", "technical_debt", "code_smells", "refactoring_motivation"]
        outputs: ["refactoring_requirements", "scope_definition", "priority_areas"]
        
      - id: "handoff-to-planning"
        miniPrompt: "handoff-memory-board"
        required: true
        prerequisites:
          requiredContext: ["refactoring_requirements"]
          optionalContext: ["scope_definition", "priority_areas"]
        dependencies: ["analyze-refactoring-scope"]

  - phase: "planning"
    description: "Technical design, architecture, and implementation planning"
    required: true
    steps:
      - id: "design-architecture"
        miniPrompt: "design-architecture/design-architecture"
        required: false
        prerequisites:
          requiredContext: ["refactoring_requirements"]
          optionalContext: ["existing_architecture", "technical_constraints", "scope_definition"]
        dependencies: ["handoff-to-planning"]
        skipConditions: ["minor_refactoring", "simple_cleanup"]
        outputs: ["design_specifications", "technical_requirements", "architecture_specifications"]
        
      - id: "handoff-to-implementation"
        miniPrompt: "handoff-memory-board"
        required: true
        prerequisites:
          requiredContext: ["refactoring_requirements"]
          optionalContext: ["design_specifications"]
        dependencies: ["handoff-to-planning"]

  - phase: "implementation"
    description: "Code refactoring execution"
    required: true
    steps:
      - id: "implement-refactoring"
        miniPrompt: "implementation/implement-refactoring"
        required: true
        prerequisites:
          requiredContext: ["refactoring_requirements"]
          optionalContext: ["design_specifications", "migration_strategy", "backward_compatibility", "existing_codebase", "scope_definition"]
        dependencies: ["handoff-to-implementation"]
        
      - id: "handoff-to-testing"
        miniPrompt: "handoff-memory-board"
        required: true
        prerequisites:
          requiredContext: ["refactored_code"]
          optionalContext: []
        dependencies: ["implement-refactoring"]

  - phase: "testing-review"
    description: "Testing, validation, and quality assessment"
    required: true
    steps:
      - id: "execute-tests"
        miniPrompt: "testing-review/execute-tests"
        required: true
        prerequisites:
          requiredContext: ["refactored_code", "original_functionality"]
          optionalContext: ["automated_tests", "performance_benchmarks", "test_plan"]
        dependencies: ["handoff-to-testing"]

# Workflow-level configurations
skipConditions:
  - condition: "new_greenfield_project"
    message: "No existing code to refactor, use feature-development workflow instead"
  - condition: "minimal_technical_debt"
    message: "Codebase doesn't require significant refactoring"

validationRules:
  - rule: "refactoring_scope_validation_required"
    phases: ["analysis"]
    message: "Refactoring scope and requirements must be clearly defined before proceeding to planning"
  - rule: "backward_compatibility_required"
    phases: ["implementation"]
    dependencies: ["planning"]
    message: "Refactoring must maintain backward compatibility unless technical requirements specify otherwise"
  - rule: "performance_validation_required"
    phases: ["testing-review"]
    dependencies: ["implementation"]
    message: "Performance impact must be measured and validated"

notifications:
  - trigger: "phase_completion"
    phases: ["analysis", "planning", "implementation", "testing-review"]
    message: "Major refactoring phase completed"
  - trigger: "workflow_completion"
    message: "Code refactoring completed successfully"

# Smart execution settings
execution:
  allowSkipping: true
  requireExplicitApproval: false
  automaticProgressTracking: true 